1. Node.js란?(확장자 js)
  a) ~ 1995년 이전 : HTML + CSS -> 웹사이트 개발 
     ~ 1995년 이후 : HTML + CSS + JavaScript -> 웹사이트 개발 (완전 새로운것이 아님. 기존에 부족한 것을 채우는것)

  b) JavaScript
     - Netscape사에서 개발한 live script > Mocha > JavaScript 12월 발행

  c) 브라우저에서 지원하는 자바스크립트 엔진
     - 사파리(Safari) : JavaScript Core
     - InternetExplorer(MS) : Chakara
     - Firefox : Spider Monkey
     - Chrome : V8 엔진(JIT Just - in - Time comilation)
     - Edage(MS) : Chakara -> 2021년도에 V8 엔진을 탑재

  d) 2009년 Ryan Dahl(라이언 달)이 Node.js를 발표
     Deno : TypeScript 런타임 최초 개발자(자바스크립트 환경 개발자)
     -- JavaScript everywhere -- 

  e) Node.js는 
     '크롬의 V8엔진을 탑재하고 있는 자바스크립트 런타임 환경이다'
     'JavaScript code outside a web browser.'

  f) Browser vs Node.js
     Browser -> 동적인 웹 애플리케이션 구현 가능(동적인 처리 = 이벤트 처리)
                --------------------------------
                Web API - Windows, Document, Ajax, JSON...

     Node.js -> 서버와 서버간의 렌더링, 백엔드 서버 구현, 
                프론트 엔드 개발 등...
                --------------------------------
                Node API 

2. Node.js를 어떻게 공부할 것인가?
  a) Node의 구조를 정확히 이해하고 실행방식을 기억한다.
  b) Node에서 제공하는 API를 잘 사용할 줄 알아야 한다.
     API는 자바스크립트 문법으로 작성되었으므로, 문법을 정확히 익히도록 한다.
  c) 개발을 편리하게 지원해주는 프레임워크에 대해서 익힌다.(스프링)
     Node.js -> Express, Rust
     Web API(브라우저) -> React, Vue

3. Node.js 특징 4가지
  a) JavaScript Runtime
     - V8 엔진 탑재 -> EcmaScript6, Open Source, Node API...
  b) Single Thread
     - Process(Multi Thread) vs Thread
  c) Non-Blocking(비동기적) IO(Input/Output)
  (키보드를 통해 입력받는 명령어.. 등+ IO를 관련 명령어를 만나면 바로 실행X, node에 잠시 담아두고 Non Blocking으로 처리)  
  d) Event - Driven

4. 실행환경 만들기
  a) Node.js 설치
  b) 터미널 툴 설치
     - 윈도우용 터미널 : https://cmder.app/
     - 맥용 터미널 : https://iterm2.com/
  c) 개발 툴 설치 : VSCode
  d) Git 설치 및 GitHub 연동

5. REPL(터미널 환경에서 node 실행)
   R: Read, E: Eval, P: Print, L: Loop

6. console.log에 대한 API 검색 및 활용 (2.console.js파일 참조)

7. this정리//global, object인지// (3.this.js)

8. export/require - node, Blocking
   export/import - JavaScript, Non-Blocking(npm init --yes 제이슨객체 폴더 생성. "type=module", "main": "5.e_counter.js", 해당폴더 추가  )
   (export가 나오면 블러킹으로 처리하려고 한다. 그부분을 해결하는 문법으로는)

9. os - 운영체제 정보 (빌트인 객체이기때문에 소문자 사용)
  
(
  - 블러킹은 순차적
  - 넌블러킹은 우선 던저놓고..
  
)

10. Node API
  a) os - 운영체제 정보
  b) Process
  c) Path pro
  d) FileSystem
  e) Stream(Output/보내고) & Buffer - 임시저장 Non-Blocking(promise)(Input/받고 & Output/보내고) =>ex. 넷플릭스, 채팅서버 

11. NPM(Node Package Manager)
- npmjs.com
- 노드에서 외부 라이브러리 사용과 프로젝트 관리를 위함
- 오픈 소스로 제공되며, 천백만명의 개발자들이 사용하는 큰 커뮤니티로 백만개 이상의 라이브러리 존재
- NPX는 다운로드하여 저장하지 않고, 바로 실행
- yarn는 페이스북에서 만든 라이브러리 커뮤니티로 npm에서 제기되는 문제점을 해결하고자 만듬, 
  React에서 주로 사용되며, NPM과 호환 됨

12. HTTP / HTTPS
  1) HTTP / HTTPS
    - <HTTP> Hypertext Transfer Protocol (request - response protocol)

              request(URL:http://www.naver.com/index.do) - dns (domain server)
      client -------------------> server
            <--------------------
                response(HTML) - 서버의 역할
                      |
          데이터를 가로채는 경우 발생
    

    - <HTTPS> Hypertext Transfer Protocol Secure

              request(URL:https://www.naver.com/index.do) - dns (domain server)
      client -------------------> server
            <--------------------
                response(HTML) : SSL, TSL 등 공개키를 사용한 암호화되어 전송
                      |
          데이터를 가로채는 경우 감소

  2) Status(상태) Codes
      https://developer.mozilla.org/ko/docs/Web/HTTP/Status

    - 서버가 클라이언트가 요청한 처리상태를 숫자 (3자리 숫자, 5개 범위) 로 전송하는 코드
      1xx : Informational
      100 ~ : 100(continue) - 용청이 정상적이며, 계속 진행 가능
              102(Processing) - 용청한 것을 아직 처리 중 

      2xx : Successful
      200 ~ : 200(OK) - 성공 메세지
              201(Created) - 클라이언트가 요청한 리소스 생성이 성공함 
              204(No Content) - 클라이언트 요청 처리 완료 전송할 컨텐츠는 없음 

      3xx : Redirection
      300 ~ : 301(Moved Permanently) - 요청한 페이지가 영구적으로 다른 곳으로 이동 
              302(Found) - 요청한 페이지가 임시적으로 다른 곳으로 이동 
              303(See Other) - 302와 동일한 의미 단, GET 방식만 사용가능

      //http 주소의 ? 뒤는 쿼리스트링(get 방식)
      4xx : client error
      400 ~ : 400(Bad Request) - 요청한 쿼리가 잘 못 된 경우 
              401(Unauthorized) - 로그인 등 권한이 없는 클라이언트가 요청한 경우 
              403(Forbidden) - 로그인한 사용자이지만 특정한 일을 수행할 권이 없는 경우 
              404(Not Found) - Url이 존재하지 않을 경우
              405(Method Not Allowed) - 요청한 기능이 허용되지 않을 경우

      
      5xx : Server error
      500 ~ : 500(Internal Server Error) - 서버에서 요청을 처리할 수 없는 경우
              502(Bad Gateway) - 중간에 서버 요청을 어떻게 처리해야 할지 모르는 경우 전송 
              503(Service Unavailable) - URL에서 요청한 특정한 처리를 하기 위한 준비가 아직 안 됐을때

  3) Request
  - URL : Uniform Resource Location
      https://www.server.con:80/course/frontend/js/search?a=123
      ----- ------------------- ------------------------- -----
      프로       hostname           pathname(경로명)       쿼리
      토콜       80= 포트                              (쿼리스트링)
   (protocol)   (생략가능)                                GET방식

  - Method : 요청하는 방식(GET/POST/PUT...)
  MDN - https://developer.mozilla.org/ko/docs/Web/HTTP/Methods
    GET - get : 서버에서 해당 리소스를 가져오고 싶을때
    POST - Created : URL이 가리키는 곳에 무엇인가를 생성하고 싶을때,
                     전송하는 데이터의 용량이 큰 경우
    PUT - replace : URL에 있는 데이터를 업데이트 하고 싶을때,
    DELETE - delete : URL에 있는 데이터를 삭제하고 싶을때
    PATCH - replace partially : 부분적으로 업데이트 하고 싶을때
    HEAD - get without body : 데이터를 받지는 않고 HEAD만 받고 싶을때
    OPTION - all supported methods for URL : 해당 URL에서 사용 가능한 모든 메소드 옵션을 알고 싶을때
    TRACE - echoes the received request : 요청에 대한 서버의 반응 상태를 확인할 때

    [GET] - 200(get으로 요청 성공), 401, 403, 404, 405 ...
    [POST] - 201, 401, 403, 404, 409 ...
    [PUT/DELETE/PATCH] - 200, 204, 404, 405 ...
    [HEAD/OPTION/TRACE] - 200, 401, 403, 404, 405 ...

    * GET/HEAD/OPTION/TRACE 메소드는 서버의 데이터를 읽기만 진행
      POST/PUT/DELETE/PATCH 데이터의 변경을 요청하는 메소드

  4) HTTP Headers
    - Stateless Protocol : HTTP는 상태정보를 저장하지 않는 프로토콜이므로 서버에 대한 인증을 필요시 얻어야함
    - Cookies & Session
                1.request(Get):http//www.naver.com/login
                    (네이버 페이지 보여달라 요청)
    Client -----------------------------------------------> Server
           <----------------------------------------------
                     2.response:로그인화면(HTML)

                3.request(post):로그인 요청 (id,pass) 
           -----------------------------------------------> Server + DB
           <------------------------------ 4.로그인 성공:Session(key0)
           5.URL + Session(key0) -----------------------> 
            (1,2,3,4 다 넘어옴)
Cookies(Session(key0))/로그인에 성공하면 Cookies에 다 넘어옴
| ------> 브라우저



